import re

from aiogram import Bot, Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from config_reader import config
from main_buttons.buttons import main_kb, book_kb, rmk
from utils.states import Form


reservation_router = Router()
bot = Bot(token=config.bot_token.get_secret_value())

@reservation_router.message(StateFilter(None), F.text.lower() == 'ü§≥–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª')
async def booking(message: types.Message, state: FSMContext):
    await message.answer('üë•–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=rmk)
    await state.set_state(Form.phone)

@reservation_router.message(Form.phone)
async def phone(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(phone=message.text)
        await state.set_state(Form.name)
        await message.answer('üë§–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    else:
        await message.answer(
            '‚ùå–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.‚ùå\n\n'
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–∏—Ñ—Ä–∞–º–∏.',
            reply_markup=main_kb()
        )
        await state.clear()

@reservation_router.message(Form.name)
async def name(message: types.Message, state: FSMContext):
    if message.text.isalpha():
        await state.update_data(name=message.text)
        await state.set_state(Form.date_time)
        await message.answer('üìÖ–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:')
    else:
        await message.answer(
            '‚ùå–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.‚ùå\n\n'
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.',
            reply_markup=main_kb()
        )
        await state.clear()

@reservation_router.message(Form.date_time)
async def date_time(message: types.Message, state: FSMContext):
    if re.match(r'^[\d\W]+$', message.text):
        await state.update_data(date_time=message.text)
        data = await state.get_data()
        await message.answer(
            f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª –Ω–∞ {data["date_time"]}?\n\n'
            f'–í–∞—à–µ –∏–º—è: {data["name"]}\n'
            f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["phone"]}\n\n',
            reply_markup=book_kb()
        )
        await state.set_state()
    else:
        await message.answer(
            '‚ùå–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.‚ùå\n\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.',
            reply_markup=main_kb()
        )
        await state.clear()

@reservation_router.message(StateFilter(None), F.text.lower() == '‚úÖ–¥–∞')
async def yes_booking(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get('phone')
    name = data.get('name')
    date_time = data.get('date_time')
    if phone is not None and name is not None and date_time is not None:
        admin_channel_id = config.admin_channel_id.get_secret_value()
        admin_message = (
            f'‚ÄºÔ∏è–ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï:‚ÄºÔ∏è\n\n'
            f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n'
            f'–ò–º—è: {name}\n'
            f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date_time}\n\n'
            f'–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username} (ID: {message.from_user.id})'
        )
        await bot.send_message(admin_channel_id, admin_message)
        await message.answer(
            '‚úÖ–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.‚úÖ\n\n'
            '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n'
            '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!üòä',
            reply_markup=main_kb()
        )
        await state.clear()
    else:
        error_message = (
            '‚ùå–ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.‚ùå\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )
        await message.answer(
            error_message,
            reply_markup=main_kb()
        )
        await state.clear()

@reservation_router.message(StateFilter(None), F.text.lower() == '‚ùå–Ω–µ—Ç')
async def no_booking(message: Message, state: FSMContext):
    await message.answer(
        '‚ùå–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.‚ùå\n\n'
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=main_kb()
    )
    await state.clear()
