from aiogram import Bot, Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from config_reader import config
from main_buttons.buttons import main_kb, delivery_kb, rmk
from utils.states import Form


delivery_router = Router()
bot = Bot(token=config.bot_token.get_secret_value())

@delivery_router.message(StateFilter(None) ,F.text.lower() == 'üöò–¥–æ—Å—Ç–∞–≤–∫–∞')
async def delivery(message: Message, state: FSMContext):
    await message.answer('üë•–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=rmk)
    await state.set_state(Form.phone1)

@delivery_router.message(Form.phone1)
async def phone1(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(phone1=message.text)
        await state.set_state(Form.name1)
        await message.answer('üë§–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    else:
        await message.answer(
            '‚ùå–ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.‚ùå\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=main_kb()
        )
        await state.clear()

@delivery_router.message(Form.name1)
async def name_delivery(message: types.Message, state: FSMContext):
    if message.text.isalpha():
        await state.update_data(name1=message.text)
        await state.set_state(Form.address)
        await message.answer('üè†–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')
    else:
        await message.answer(
            '‚ùå–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.‚ùå\n\n'
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.',
            reply_markup=main_kb()
        )
        await state.clear()

@delivery_router.message(Form.address)
async def address(message: types.Message, state: FSMContext):
        await state.update_data(address=message.text)
        await state.set_state(Form.dishes)
        await message.answer('üçï–£–∫–∞–∂–∏—Ç–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:')

@delivery_router.message(Form.dishes)
async def dishes(message: Message, state: FSMContext):
    await state.update_data(dishes=message.text)
    data = await state.get_data()
    await message.answer(
        f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:\n{data["dishes"]}?\n\n'
        f'–í–∞—à–µ –∏–º—è: {data["name1"]}\n'
        f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["phone1"]}\n'
        f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data["address"]}\n\n',
        reply_markup=delivery_kb()
    )
    await state.set_state()

@delivery_router.message(StateFilter(None), F.text.lower() == '‚úÖ')
async def yes_delivery(message: Message, state: FSMContext):
    data = await state.get_data()
    phone1 = data.get('phone1')
    name1 = data.get('name1')
    address = data.get('address')
    dishes = data.get('dishes')
    if phone1 is not None and name1 is not None and address is not None and dishes is not None:
        admin_channel_id = config.admin_channel_id.get_secret_value()
        admin_message = (
            f'‚ÄºÔ∏è–î–æ—Å—Ç–∞–≤–∫–∞:‚ÄºÔ∏è\n\n'
            f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone1}\n'
            f'–ò–º—è: {name1}\n'
            f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n'
            f'–ë–ª—é–¥–∞: {dishes}\n\n'
            f'–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username} (ID: {message.from_user.id})'
        )
        await bot.send_message(admin_channel_id, admin_message)
        await message.answer(
            '‚úÖ–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω.‚úÖ\n\n'
            '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n'
            '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!üòä',
            reply_markup=main_kb()
        )
        await state.clear()
    else:
        error_message = (
            '‚ùå–ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.‚ùå\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )
        await message.answer(
            error_message,
            reply_markup=main_kb()
        )
        await state.clear()

@delivery_router.message(StateFilter(None), F.text.lower() == '‚ùå')
async def no_delivery(message: Message, state: FSMContext):
    await message.answer(
        '‚ùå–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.‚ùå\n\n'
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=main_kb()
    )
    await state.clear()
