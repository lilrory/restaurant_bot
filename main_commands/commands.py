from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from main_buttons.buttons import main_kb
from reservation import booking, yes_booking, no_booking
from delivery import delivery, yes_delivery, no_delivery

router = Router()


@router.message(Command('start'))
async def start(message: Message):
    user_name = message.from_user.username
    await message.answer(
        f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üçïPizzaüçï, @{user_name}!\n'
        f'–°–Ω–∏–∑—É –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n',
        reply_markup=main_kb()
    )

@router.message(F.text.lower() == 'üïì—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
async def work_time(message: Message):
    await message.answer(
        f'Pizzaüçï\n\n'
        f'–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n'
        f'–ü–ù-–í–°: 10:00 - 22:30\n\n'
        f'–ê–¥—Ä–µ—Å: –ê—Å—Ç–∞–Ω–∞\n\n'
        f'‚òéÔ∏è–¢–µ–ª: +7 (777) 777-77-77\n',
        reply_markup=main_kb()   
    )

@router.message(F.text.lower() == 'üìï–º–µ–Ω—é')
async def menu(message: Message):
    await message.answer(
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω—é.\n\n'
        'https://telegra.ph/Menyu-12-08-10',
        reply_markup=main_kb()   
    )    

# –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª
@router.message(StateFilter(None), F.text.lower() == 'ü§≥–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª')
async def booking_handler(message: types.Message, state: FSMContext):
    await booking(message, state)

@router.message(StateFilter(None), F.text.lower() == '‚úÖ–¥–∞')
async def yes_booking_handler(message: types.Message, state: FSMContext):
    await yes_booking(message, state)

@router.message(StateFilter(None), F.text.lower() == '‚ùå–Ω–µ—Ç')
async def no_booking_handler(message: types.Message, state: FSMContext):
    await no_booking(message, state)

# –¥–æ—Å—Ç–∞–≤–∫–∞
@router.message(StateFilter(None) ,F.text.lower() == 'üöò–¥–æ—Å—Ç–∞–≤–∫–∞')
async def delivery_handler(message: types.Message, state: FSMContext):
    await delivery(message, state)

@router.message(StateFilter(None), F.text.lower() == '‚úÖ')
async def yes_delivery_handler(message: types.Message, state: FSMContext):
    await yes_delivery(message, state)

@router.message(StateFilter(None), F.text.lower() == '‚ùå')
async def no_delivery_handler(message: types.Message, state: FSMContext):
    await no_delivery(message, state)
